{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Drunc Web User Interface (drunc-ui)","text":"<p>This repo defines the web interface for various drunc tools. Including:</p> <ul> <li>The Process Manager</li> <li>The Controllers</li> </ul>"},{"location":"#running-the-project-locally","title":"Running the Project Locally","text":"<p>The DUNE control system comprises multiple services working in concert (see the drunc repository for an overview). Whilst it is possible to manually run the individual services as required it is strongly recommended to use the Docker setup provided.</p>"},{"location":"#docker-setup","title":"Docker Setup","text":"<p>This repository provides a Docker Compose configuration providing the requisite services suitable for development of the interfaces using realistic test data. Working with the full docker stack requires building a very larger docker base image and has heavy resource requirements when running. For this reason a \"lite\" stack is also provided that can be used for development of the Process Manager UI.</p> <p>The full and lite stack are defined using Docker Compose profiles. It is recommended to set the <code>COMPOSE_PROFILES</code> environment variable to select which stack you are working with. Use the value <code>drunc</code> for the full stack or <code>drunc-lite</code> for the lite stack.</p> <p>You can also use the <code>--profile</code> flag when invoking <code>docker compose</code> however the instructions in this file assume you are using the environment variable.</p>"},{"location":"#process-manager-ui","title":"Process Manager UI","text":"<p>You can use either the full or lite Docker Compose profiles when working with the Process Manager UI.</p>"},{"location":"#getting-started-with-the-process-manager-ui","title":"Getting Started with the Process Manager UI","text":"<p>Check you have a value set for <code>COMPOSE_PROFILES</code> (see above). Start the docker stack with:</p> <pre><code>docker compose up\n</code></pre> <p>It can take a few moments for the services to boot but the UI should then be available in the browser at http://localhost:8000/process_manager/.</p> <p>Note that if you have the Process Manager UI already open in a browser you may see backtraces from unsuccessful requests generated by the UI. These should stop once drunc has finished starting up.</p> <p>Authentication is required to work with the application so you need to create a user account to work with:</p> <pre><code>docker compose exec app python manage.py createsuperuser\n</code></pre> <p>and follow the prompts. You should then be able to use the details you supplied to pass the login screen. You can use the \"boot\" button on the main page to create simple processes to experiment with.</p> <p>Take the services down with <code>docker compose down</code> or by pressing Ctrl+C in the corresponding terminal.</p>"},{"location":"#controller-ui","title":"Controller UI","text":"<p>You must use the full Docker Compose profile when working with the Controller UI.</p>"},{"location":"#getting-started-with-the-controller-ui","title":"Getting Started with the Controller UI","text":"<p>Check you have value of the <code>COMPOSE_PROFILES</code> variable set to <code>drunc</code> (see above). As with the Process Manager UI start the Docker Compose services and create a user account if not already done. You can then boot a full test session:</p> <pre><code>docker compose exec drunc /boot_test_session.sh\n</code></pre> <p>Note that the above consumes several Gb of memory.</p> <p>Once booted you can interact with the root controller via:</p> <pre><code>docker compose exec drunc /entrypoint.sh drunc-controller-shell grpc://localhost:3333\n</code></pre> <p>You should now be able to access the Controller UI at http://localhost:8000/controller/ . For details of working with the controller see the drunc wiki. You should also be able to see the booted processes in the Process Manager UI.</p>"},{"location":"#not-using-docker","title":"Not Using Docker","text":"<p>Brief instructions are provided below on how to manually run the various services required to work with the Drunc UIs. These are only meant to be indicative however and are not regularly tested or maintained.</p> <ol> <li> <p>Start Kafka - See Running drunc with pocket kafka.</p> </li> <li> <p>Start the drunc shell:    <code>drunc-unified-shell --log-level debug ./data/process-manager-pocket-kafka.json</code></p> </li> <li> <p>Start the application server: <code>python manage.py runserver</code></p> </li> <li> <p>Start the Kafka consumer: <code>python manage.py kafka_consumer --debug</code></p> </li> </ol> <p>You may then need to perform subsequent actions such as booting test session data.</p>"},{"location":"code_overview/","title":"Code Overview","text":""},{"location":"code_overview/#high-level-architecture","title":"High-level Architecture","text":"<p>The code base covers several user interfaces covering different aspects of the DUNE run control system. There are distinct interfaces but also shared infrastructure and approaches.</p> <p>For this reason the code is organised into three Django apps:</p> <ul> <li><code>process_manager</code> - the Process Manager UI.</li> <li><code>controller</code> - the Controller UI.</li> <li><code>main</code> - common functionality and shared infrastructure between the UIs.</li> </ul> <p>This separation of concerns has been chosen to allow splitting the UIs into separate code bases at a later point if desired.</p>"},{"location":"code_overview/#design-goals","title":"Design Goals","text":"<ul> <li>Compatibility with wider expertise of the DUNE project i.e. Python and avoiding   complex frontend code.</li> <li>Simplicity.</li> <li>Provide a \"good enough\" user experience.</li> <li>Ease of development.</li> </ul>"},{"location":"code_overview/#technology-choices","title":"Technology Choices","text":"<ul> <li>Django<ul> <li>A popular Python back-end framework with a batteries included approach.</li> <li>Standardised code layout.</li> <li>Abstraction over underlying database technology via Object Relational Mapping.</li> <li>Excellent documentation.</li> <li>Broad range of community packages.</li> </ul> </li> <li>HTMX<ul> <li>Frontend library that adds dynamic behaviour to html to enable server side rendering.</li> <li>Easy to learn.</li> <li>Declarative approach.</li> <li>Popular in the Django community.</li> <li>Can be used sparingly and progressively alongside standard Django templating.</li> </ul> </li> <li>Hyperscript<ul> <li>A front-end scripting alternative to Javascript.</li> <li>Complements HTMX by providing small amounts of dynamic behaviour where required.</li> <li>Prioritises readability and conciseness.</li> <li>Emphasises locality of behaviour.</li> <li>Can be used sparingly and progressively alongside standard Django templating.</li> </ul> </li> </ul>"},{"location":"code_overview/#external-interactions","title":"External Interactions","text":""},{"location":"code_overview/#dune-run-control-drunc","title":"Dune Run Control (drunc)","text":"<p>The primary purpose of this code base is to provide web based user interfaces for the various components of drunc (e.g. the process manager or controllers). Interactions with drunc components use the provided gRPC interfaces however this is abstracted over by the <code>Driver</code> classes provided in the drunc codebase (see for instance the ProcessManagerDriver class). A thin wrapper over the driver classes is used to handle authentication (currently dummy tokens).</p>"},{"location":"code_overview/#kafka","title":"Kafka","text":"<p>Kafka is used to send informational messages between different components of drunc. These messages are displayed in several places in the web UIs. Receiving messages from Kafka requires a long-running process to act as a consumer and make messages available within the web application.</p> <p>The consumer is implemented as a Django admin command and can be run as <code>python manage.py kafka_consumer</code>. This makes messages available to the web application by storing them in the database. This command is also responsible for pruning messages from the database after a configurable retention period.</p>"},{"location":"code_overview/#authentication","title":"Authentication","text":"<p>In the absence of a defined authentication mechanism for use in production, the project currently uses the built-in Django authentication system. This requires manual creation of users via the Django command line interface and stores user data in the application database. This is a placeholder that will need to be replaced.</p>"},{"location":"code_overview/#permissions","title":"Permissions","text":"<p>Permissions are used to control the actions that can be performed or information that can be viewed by different users. Permissions are defined on the custom user model defined in <code>main/models.py</code>. A fine-grained approach is taken to permissions whereby individual actions are have their own associated permission. Once the authorisation model for the dune-daq systems is well defined, individual permissions can be grouped together into user roles via Django groups.</p>"},{"location":"code_overview/#database","title":"Database","text":"<p>This application requires a database to:</p> <ul> <li>Store user data.</li> <li>Manage user sessions.</li> <li>Cache broadcast messages.</li> </ul> <p>An SQLite database is used in development however Django abstracts over the underlying database technology and supports multiple different databases that may be used in deployment.</p>"},{"location":"controller/","title":"Controller UI","text":"<p>WIP.</p>"},{"location":"development/","title":"Development","text":"<p>Note</p> <p>Make sure you've been through the instructions to run the project locally, can successfully run the web application under the Docker setup, have carried out the setup steps and can access the UI's you want to work with in the browser.</p> <p>Working with the full functionality of the web application requires a number of services to be started and to work in concert. The Docker Compose stack provides the required services and is suitable for development and manual testing but is not suitable for running QA (pre-commit) tooling or unit tests. The project directory is mounted into the <code>app</code> service which allows the Django development server's auto-reload mechanism to detect changes to local files and work as expected.</p> <p>In addition to the Docker setup, you will also need to follow the below instructions on working with poetry to run the project's QA tooling and unit tests.</p>"},{"location":"development/#working-with-poetry","title":"Working with Poetry","text":"<p>This is a Python application that uses poetry for packaging and dependency management. It also provides pre-commit hooks for various linters and formatters and automated tests using pytest and GitHub Actions. Pre-commit hooks are automatically kept updated with a dedicated GitHub Action.</p> <p>To get started:</p> <ol> <li> <p>Download and install Poetry following    the instructions for your OS.</p> </li> <li> <p>Clone this repository and make it your working directory</p> </li> <li> <p>Set up the virtual environment:</p> <pre><code>poetry install\n</code></pre> </li> <li> <p>Activate the virtual environment (alternatively, ensure any Python-related command is    preceded by <code>poetry run</code>):</p> <pre><code>poetry shell\n</code></pre> </li> <li> <p>Install the git hooks:</p> <pre><code>pre-commit install\n</code></pre> </li> </ol> <p>Pre-commit should now work as expected when making commits even without the need to have an active poetry shell. You can also manually run pre-commit (e.g. <code>pre-commit run -a</code>) and the unit tests with <code>pytest</code>. Remember you'll need to prefix these with <code>poetry run</code> first if you don't have an active poetry shell.</p>"},{"location":"process_manager/","title":"Process Manager UI","text":"<p>This provides:</p> <ul> <li>An index page containing:<ul> <li>a table displaying the currently running processes.</li> <li>a feed showing broadcast messages from the topics <code>control.*.process_manager</code>.</li> <li>action buttons that allow calling the <code>restart</code>, <code>kill</code> and <code>flush</code> functions of   the process manager.</li> </ul> </li> <li>A view displaying the logs of an individual process.</li> <li>A view providing a form collecting data for use with the process manager <code>dummy_boot</code>   function (for use in development).</li> </ul> <p>The view functions for this UI are split into three categories:</p> <ul> <li><code>pages</code> that load a full page.</li> <li><code>partials</code> that load items within a page.</li> <li><code>actions</code> that proxy requests to the process manager.</li> </ul>"},{"location":"process_manager/#index-page","title":"Index Page","text":"<p>As the most complex part, some more information is provided here about the index page.</p> <p>The page is composed primarily of two columns with the message feed on the right. The left contains a row of buttons for performing actions on processes, a search bar for the process table and the process table itself.</p>"},{"location":"process_manager/#process-table","title":"Process Table","text":"<p>To keep the process table in sync with the system state the table is updated periodically. The table is rendered via a partial view function that is polled on an interval via HTMX.</p> <p>Search of the table is also implemented via HTMX. Typing into the text input triggers a call to the process table partial view function which includes the search query. A new version of the table is returned containing only those entries that match the search query.</p> <p>A small amount of client side behaviour is implemented via Hyperscript to:</p> <ol> <li>make the table checkboxes behave as a group with the header checkbox accurately    reflecting the state of the row checkboxes.</li> <li>disable/enable the action buttons based on whether any checkboxes are selected or    not.</li> </ol>"},{"location":"process_manager/#message-feed","title":"Message Feed","text":"<p>Similarly to the process table, the message feed is updated periodically to display new messages received. This is implemented in an equivalent manner with a partial function polled by HTMX.</p> <p>Search of messages is also implemented in an equivalent manner to the process table via a text input which updates the feed when typed into.</p> <p>The message feed can be hidden by the user by clicking an 'X'. This behaviour is implemented on the client side by using Hyperscript to toggle the visibility of the feed element.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>main<ul> <li>admin</li> <li>apps</li> <li>management<ul> <li>commands<ul> <li>kafka_consumer</li> <li>store_message</li> </ul> </li> </ul> </li> <li>migrations<ul> <li>0001_initial</li> <li>0002_alter_user_options</li> <li>0003_druncmessage</li> <li>0004_druncmessage_topic</li> </ul> </li> <li>models</li> <li>urls</li> <li>views</li> </ul> </li> <li>process_manager<ul> <li>admin</li> <li>apps</li> <li>forms</li> <li>migrations</li> <li>models</li> <li>process_manager_interface</li> <li>tables</li> <li>urls</li> <li>views<ul> <li>actions</li> <li>pages</li> <li>partials</li> </ul> </li> </ul> </li> <li>controller<ul> <li>admin</li> <li>apps</li> <li>migrations</li> <li>models</li> <li>urls</li> <li>views</li> </ul> </li> </ul>"},{"location":"reference/controller/","title":"controller","text":""},{"location":"reference/controller/#controller","title":"<code>controller</code>","text":"<p>The controller app for the drunc_ui project.</p>"},{"location":"reference/controller/admin/","title":"admin","text":""},{"location":"reference/controller/admin/#controller.admin","title":"<code>controller.admin</code>","text":"<p>Admin module for the controller app.</p>"},{"location":"reference/controller/apps/","title":"apps","text":""},{"location":"reference/controller/apps/#controller.apps","title":"<code>controller.apps</code>","text":"<p>Apps module for the controller app.</p>"},{"location":"reference/controller/apps/#controller.apps-classes","title":"Classes","text":""},{"location":"reference/controller/apps/#controller.apps.ControllerConfig","title":"<code>ControllerConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p> <p>The app config for the controller app.</p>"},{"location":"reference/controller/models/","title":"models","text":""},{"location":"reference/controller/models/#controller.models","title":"<code>controller.models</code>","text":"<p>Models module for the controller app.</p>"},{"location":"reference/controller/urls/","title":"urls","text":""},{"location":"reference/controller/urls/#controller.urls","title":"<code>controller.urls</code>","text":"<p>Urls module for the controller app.</p>"},{"location":"reference/controller/views/","title":"views","text":""},{"location":"reference/controller/views/#controller.views","title":"<code>controller.views</code>","text":"<p>Views module for the controller app.</p>"},{"location":"reference/controller/views/#controller.views-functions","title":"Functions","text":""},{"location":"reference/controller/views/#controller.views.index","title":"<code>index(request)</code>","text":"<p>View that renders the index/home page.</p> Source code in <code>controller/views.py</code> <pre><code>@login_required\ndef index(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"View that renders the index/home page.\"\"\"\n    return render(request=request, template_name=\"controller/index.html\")\n</code></pre>"},{"location":"reference/controller/migrations/","title":"migrations","text":""},{"location":"reference/controller/migrations/#controller.migrations","title":"<code>controller.migrations</code>","text":""},{"location":"reference/main/","title":"main","text":""},{"location":"reference/main/#main","title":"<code>main</code>","text":"<p>The main app for the drunc_ui project.</p>"},{"location":"reference/main/admin/","title":"admin","text":""},{"location":"reference/main/admin/#main.admin","title":"<code>main.admin</code>","text":"<p>Admin module for the main app.</p>"},{"location":"reference/main/admin/#main.admin-classes","title":"Classes","text":""},{"location":"reference/main/apps/","title":"apps","text":""},{"location":"reference/main/apps/#main.apps","title":"<code>main.apps</code>","text":"<p>The apps module for the main app.</p>"},{"location":"reference/main/apps/#main.apps-classes","title":"Classes","text":""},{"location":"reference/main/apps/#main.apps.MainConfig","title":"<code>MainConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p> <p>The app config for the main app.</p>"},{"location":"reference/main/models/","title":"models","text":""},{"location":"reference/main/models/#main.models","title":"<code>main.models</code>","text":"<p>Models module for the main app.</p>"},{"location":"reference/main/models/#main.models-classes","title":"Classes","text":""},{"location":"reference/main/models/#main.models.DruncMessage","title":"<code>DruncMessage</code>","text":"<p>               Bases: <code>Model</code></p> <p>Model for drunc broadcast messages.</p>"},{"location":"reference/main/models/#main.models.User","title":"<code>User</code>","text":"<p>               Bases: <code>AbstractUser</code></p> <p>Custom user model for this project.</p>"},{"location":"reference/main/models/#main.models.User-classes","title":"Classes","text":""},{"location":"reference/main/models/#main.models.User.Meta","title":"<code>Meta</code>","text":"<p>Meta class for the User model.</p>"},{"location":"reference/main/urls/","title":"urls","text":""},{"location":"reference/main/urls/#main.urls","title":"<code>main.urls</code>","text":"<p>Urls module for the main app.</p>"},{"location":"reference/main/views/","title":"views","text":""},{"location":"reference/main/views/#main.views","title":"<code>main.views</code>","text":"<p>Views for the main app.</p>"},{"location":"reference/main/views/#main.views-classes","title":"Classes","text":""},{"location":"reference/main/views/#main.views.HelpView","title":"<code>HelpView</code>","text":"<p>               Bases: <code>View</code></p> <p>View that renders the help page.</p>"},{"location":"reference/main/views/#main.views.HelpView-functions","title":"Functions","text":""},{"location":"reference/main/views/#main.views.HelpView.get","title":"<code>get(request)</code>","text":"<p>Render the help page.</p> Source code in <code>main/views.py</code> <pre><code>def get(self, request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"Render the help page.\"\"\"\n    return render(request=request, template_name=\"main/help.html\")\n</code></pre>"},{"location":"reference/main/views/#main.views-functions","title":"Functions","text":""},{"location":"reference/main/views/#main.views.index","title":"<code>index(request)</code>","text":"<p>View that renders the index/home page.</p> Source code in <code>main/views.py</code> <pre><code>@login_required\ndef index(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"View that renders the index/home page.\"\"\"\n    return render(request=request, template_name=\"main/index.html\")\n</code></pre>"},{"location":"reference/main/management/","title":"management","text":""},{"location":"reference/main/management/#main.management","title":"<code>main.management</code>","text":"<p>Django management module.</p>"},{"location":"reference/main/management/commands/","title":"commands","text":""},{"location":"reference/main/management/commands/#main.management.commands","title":"<code>main.management.commands</code>","text":"<p>Django management commands.</p>"},{"location":"reference/main/management/commands/kafka_consumer/","title":"kafka_consumer","text":""},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer","title":"<code>main.management.commands.kafka_consumer</code>","text":"<p>Django management command to populate Kafka messages into application database.</p>"},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer-classes","title":"Classes","text":""},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer.Command","title":"<code>Command</code>","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Consumes messages from Kafka and stores them in the database.</p>"},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer.Command-functions","title":"Functions","text":""},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer.Command.add_arguments","title":"<code>add_arguments(parser)</code>","text":"<p>Add commandline options.</p> Source code in <code>main/management/commands/kafka_consumer.py</code> <pre><code>def add_arguments(self, parser: ArgumentParser) -&gt; None:\n    \"\"\"Add commandline options.\"\"\"\n    parser.add_argument(\"--debug\", action=\"store_true\")\n</code></pre>"},{"location":"reference/main/management/commands/kafka_consumer/#main.management.commands.kafka_consumer.Command.handle","title":"<code>handle(debug=False, **kwargs)</code>","text":"<p>Command business logic.</p> Source code in <code>main/management/commands/kafka_consumer.py</code> <pre><code>def handle(self, debug: bool = False, **kwargs: Any) -&gt; None:  # type: ignore[misc]\n    \"\"\"Command business logic.\"\"\"\n    consumer = KafkaConsumer(bootstrap_servers=[settings.KAFKA_ADDRESS])\n    consumer.subscribe(pattern=f\"({'|'.join(settings.KAFKA_TOPIC_REGEX.values())})\")\n    # TODO: determine why the below doesn't work\n    # consumer.subscribe(pattern=\"control.no_session.process_manager\")\n\n    self.stdout.write(\"Listening for messages from Kafka.\")\n    while True:\n        for messages in consumer.poll(timeout_ms=500).values():\n            message_records = []\n\n            for message in messages:\n                if debug:\n                    self.stdout.write(f\"Message received: {message}\")\n                    self.stdout.flush()\n\n                # Convert Kafka timestamp (milliseconds) to datetime (seconds).\n                time = datetime.fromtimestamp(message.timestamp / 1e3, tz=UTC)\n\n                bm = BroadcastMessage()\n                bm.ParseFromString(message.value)\n                body = bm.data.value.decode(\"utf-8\")\n\n                message_records.append(\n                    DruncMessage(topic=message.topic, timestamp=time, message=body)\n                )\n\n            if message_records:\n                DruncMessage.objects.bulk_create(message_records)\n\n        # Remove expired messages from the database.\n        message_timeout = timedelta(seconds=settings.MESSAGE_EXPIRE_SECS)\n        expire_time = datetime.now(tz=UTC) - message_timeout\n        query = DruncMessage.objects.filter(timestamp__lt=expire_time)\n        if query.count():\n            if debug:\n                self.stdout.write(\n                    f\"Deleting {query.count()} messages \"\n                    f\"older than {expire_time}.\"\n                )\n            query.delete()\n</code></pre>"},{"location":"reference/main/management/commands/store_message/","title":"store_message","text":""},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message","title":"<code>main.management.commands.store_message</code>","text":"<p>Django management command to populate Kafka messages into application database.</p>"},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message-classes","title":"Classes","text":""},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message.Command","title":"<code>Command</code>","text":"<p>               Bases: <code>BaseCommand</code></p> <p>Store Kafka messages in the database.</p>"},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message.Command-functions","title":"Functions","text":""},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message.Command.add_arguments","title":"<code>add_arguments(parser)</code>","text":"<p>Add commandline options.</p> Source code in <code>main/management/commands/store_message.py</code> <pre><code>def add_arguments(self, parser: ArgumentParser) -&gt; None:\n    \"\"\"Add commandline options.\"\"\"\n    parser.add_argument(\"-t\", \"--topic\", default=\"NO_TOPIC\")\n    parser.add_argument(\"-m\", \"--message\", default=\"NO_MESSAGE\")\n</code></pre>"},{"location":"reference/main/management/commands/store_message/#main.management.commands.store_message.Command.handle","title":"<code>handle(*args, **kwargs)</code>","text":"<p>Command business logic.</p> Source code in <code>main/management/commands/store_message.py</code> <pre><code>def handle(self, *args: Any, **kwargs: Any) -&gt; None:  # type: ignore[misc]\n    \"\"\"Command business logic.\"\"\"\n    topic = kwargs[\"topic\"]\n    message = kwargs[\"message\"]\n    timestamp = datetime.now(tz=UTC)\n    DruncMessage.objects.create(topic=topic, timestamp=timestamp, message=message)\n</code></pre>"},{"location":"reference/main/migrations/","title":"migrations","text":""},{"location":"reference/main/migrations/#main.migrations","title":"<code>main.migrations</code>","text":""},{"location":"reference/main/migrations/0001_initial/","title":"0001_initial","text":""},{"location":"reference/main/migrations/0001_initial/#main.migrations.0001_initial","title":"<code>main.migrations.0001_initial</code>","text":""},{"location":"reference/main/migrations/0002_alter_user_options/","title":"0002_alter_user_options","text":""},{"location":"reference/main/migrations/0002_alter_user_options/#main.migrations.0002_alter_user_options","title":"<code>main.migrations.0002_alter_user_options</code>","text":""},{"location":"reference/main/migrations/0003_druncmessage/","title":"0003_druncmessage","text":""},{"location":"reference/main/migrations/0003_druncmessage/#main.migrations.0003_druncmessage","title":"<code>main.migrations.0003_druncmessage</code>","text":""},{"location":"reference/main/migrations/0004_druncmessage_topic/","title":"0004_druncmessage_topic","text":""},{"location":"reference/main/migrations/0004_druncmessage_topic/#main.migrations.0004_druncmessage_topic","title":"<code>main.migrations.0004_druncmessage_topic</code>","text":""},{"location":"reference/process_manager/","title":"process_manager","text":""},{"location":"reference/process_manager/#process_manager","title":"<code>process_manager</code>","text":"<p>The process_manager app for the drunc_ui project.</p>"},{"location":"reference/process_manager/admin/","title":"admin","text":""},{"location":"reference/process_manager/admin/#process_manager.admin","title":"<code>process_manager.admin</code>","text":"<p>Admin module for the process_manager app.</p>"},{"location":"reference/process_manager/apps/","title":"apps","text":""},{"location":"reference/process_manager/apps/#process_manager.apps","title":"<code>process_manager.apps</code>","text":"<p>Apps module for the process_manager app.</p>"},{"location":"reference/process_manager/apps/#process_manager.apps-classes","title":"Classes","text":""},{"location":"reference/process_manager/apps/#process_manager.apps.ProcessManagerConfig","title":"<code>ProcessManagerConfig</code>","text":"<p>               Bases: <code>AppConfig</code></p> <p>The app config for the process_manager app.</p>"},{"location":"reference/process_manager/forms/","title":"forms","text":""},{"location":"reference/process_manager/forms/#process_manager.forms","title":"<code>process_manager.forms</code>","text":"<p>Forms for the process_manager app.</p>"},{"location":"reference/process_manager/forms/#process_manager.forms-classes","title":"Classes","text":""},{"location":"reference/process_manager/forms/#process_manager.forms.BootProcessForm","title":"<code>BootProcessForm</code>","text":"<p>               Bases: <code>Form</code></p> <p>Form for booting processes.</p>"},{"location":"reference/process_manager/models/","title":"models","text":""},{"location":"reference/process_manager/models/#process_manager.models","title":"<code>process_manager.models</code>","text":"<p>Models module for the process_manager app.</p>"},{"location":"reference/process_manager/process_manager_interface/","title":"process_manager_interface","text":""},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface","title":"<code>process_manager.process_manager_interface</code>","text":"<p>Module providing functions to interact with the drunc process manager.</p>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface-classes","title":"Classes","text":""},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.ProcessAction","title":"<code>ProcessAction</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for process actions.</p>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface-functions","title":"Functions","text":""},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.boot_process","title":"<code>boot_process(user, data)</code>","text":"<p>Boot a process with the given data.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>str</code> <p>the user to boot the process as.</p> required <code>data</code> <code>dict[str, str | int]</code> <p>the data for the process.</p> required Source code in <code>process_manager/process_manager_interface.py</code> <pre><code>def boot_process(user: str, data: dict[str, str | int]) -&gt; None:\n    \"\"\"Boot a process with the given data.\n\n    Args:\n        user: the user to boot the process as.\n        data: the data for the process.\n    \"\"\"\n    return asyncio.run(_boot_process(user, data))\n</code></pre>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.get_process_logs","title":"<code>get_process_logs(uuid)</code>","text":"<p>Retrieve logs for a process from the process manager.</p> <p>Parameters:</p> Name Type Description Default <code>uuid</code> <code>str</code> <p>UUID of the process.</p> required <p>Returns:</p> Type Description <code>list[DecodedResponse]</code> <p>The process logs.</p> Source code in <code>process_manager/process_manager_interface.py</code> <pre><code>def get_process_logs(uuid: str) -&gt; list[DecodedResponse]:\n    \"\"\"Retrieve logs for a process from the process manager.\n\n    Args:\n      uuid: UUID of the process.\n\n    Returns:\n      The process logs.\n    \"\"\"\n    return asyncio.run(_get_process_logs(uuid))\n</code></pre>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.get_process_manager_driver","title":"<code>get_process_manager_driver()</code>","text":"<p>Get a ProcessManagerDriver instance.</p> Source code in <code>process_manager/process_manager_interface.py</code> <pre><code>def get_process_manager_driver() -&gt; ProcessManagerDriver:\n    \"\"\"Get a ProcessManagerDriver instance.\"\"\"\n    token = create_dummy_token_from_uname()\n    return ProcessManagerDriver(\n        settings.PROCESS_MANAGER_URL, token=token, aio_channel=True\n    )\n</code></pre>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.get_session_info","title":"<code>get_session_info()</code>","text":"<p>Get info about all sessions from process manager.</p> Source code in <code>process_manager/process_manager_interface.py</code> <pre><code>def get_session_info() -&gt; ProcessInstanceList:\n    \"\"\"Get info about all sessions from process manager.\"\"\"\n    return asyncio.run(_get_session_info())\n</code></pre>"},{"location":"reference/process_manager/process_manager_interface/#process_manager.process_manager_interface.process_call","title":"<code>process_call(uuids, action)</code>","text":"<p>Perform an action on a process with a given UUID.</p> <p>Parameters:</p> Name Type Description Default <code>uuids</code> <code>Iterable[str]</code> <p>List of UUIDs of the process to be actioned.</p> required <code>action</code> <code>ProcessAction</code> <p>Action to be performed {restart,flush,kill}.</p> required Source code in <code>process_manager/process_manager_interface.py</code> <pre><code>def process_call(uuids: Iterable[str], action: ProcessAction) -&gt; None:\n    \"\"\"Perform an action on a process with a given UUID.\n\n    Args:\n        uuids: List of UUIDs of the process to be actioned.\n        action: Action to be performed {restart,flush,kill}.\n    \"\"\"\n    return asyncio.run(_process_call(uuids, action))\n</code></pre>"},{"location":"reference/process_manager/tables/","title":"tables","text":""},{"location":"reference/process_manager/tables/#process_manager.tables","title":"<code>process_manager.tables</code>","text":"<p>Defines the ProcessTable for displaying process data in a structured table format.</p>"},{"location":"reference/process_manager/tables/#process_manager.tables-classes","title":"Classes","text":""},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable","title":"<code>ProcessTable</code>","text":"<p>               Bases: <code>Table</code></p> <p>Defines a Process Table for the data from the Process Manager.</p>"},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable-classes","title":"Classes","text":""},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable.Meta","title":"<code>Meta</code>","text":"<p>Table meta options for rendering behavior and styling.</p>"},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable-functions","title":"Functions","text":""},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable.render_select","title":"<code>render_select(value)</code>","text":"<p>Customize behavior of checkboxes in the select column.</p> Source code in <code>process_manager/tables.py</code> <pre><code>def render_select(self, value: str) -&gt; str:\n    \"\"\"Customize behavior of checkboxes in the select column.\"\"\"\n    return mark_safe(\n        f'&lt;input type=\"checkbox\" name=\"select\" value=\"{value}\" '\n        f'id=\"{value}-input\" hx-preserve=\"true\" '\n        'class=\"form-check-input form-check-input-lg row-checkbox\" '\n        'style=\"transform: scale(1.5);\" '\n        f'_=\"{row_checkbox_hyperscript}\"&gt;'\n    )\n</code></pre>"},{"location":"reference/process_manager/tables/#process_manager.tables.ProcessTable.render_status_code","title":"<code>render_status_code(value)</code>","text":"<p>Render the status_code with custom badge classes.</p> Source code in <code>process_manager/tables.py</code> <pre><code>def render_status_code(self, value: str) -&gt; str:\n    \"\"\"Render the status_code with custom badge classes.\"\"\"\n    if value == \"DEAD\":\n        return mark_safe('&lt;span class=\"badge badge-dead\"&gt;DEAD&lt;/span&gt;')\n    elif value == \"RUNNING\":\n        return mark_safe('&lt;span class=\"badge badge-running\"&gt;RUNNING&lt;/span&gt;')\n    return mark_safe(\n        f'&lt;span class=\"badge bg-secondary px-3 py-2 rounded\" '\n        f'style=\"font-size: 1.1rem;\"&gt;{value}&lt;/span&gt;'\n    )\n</code></pre>"},{"location":"reference/process_manager/urls/","title":"urls","text":""},{"location":"reference/process_manager/urls/#process_manager.urls","title":"<code>process_manager.urls</code>","text":"<p>Urls module for the process_manager app.</p>"},{"location":"reference/process_manager/migrations/","title":"migrations","text":""},{"location":"reference/process_manager/migrations/#process_manager.migrations","title":"<code>process_manager.migrations</code>","text":""},{"location":"reference/process_manager/views/","title":"views","text":""},{"location":"reference/process_manager/views/#process_manager.views","title":"<code>process_manager.views</code>","text":"<p>Module for app view functions.</p>"},{"location":"reference/process_manager/views/actions/","title":"actions","text":""},{"location":"reference/process_manager/views/actions/#process_manager.views.actions","title":"<code>process_manager.views.actions</code>","text":"<p>View functions for performing actions on DUNE processes.</p>"},{"location":"reference/process_manager/views/actions/#process_manager.views.actions-classes","title":"Classes","text":""},{"location":"reference/process_manager/views/actions/#process_manager.views.actions-functions","title":"Functions","text":""},{"location":"reference/process_manager/views/actions/#process_manager.views.actions.process_action","title":"<code>process_action(request)</code>","text":"<p>Perform an action on the selected processes.</p> <p>Both the action and the selected processes are retrieved from the request.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>Django HttpRequest object.</p> required <p>Returns:</p> Type Description <code>HttpResponse</code> <p>HttpResponse redirecting to the index page.</p> Source code in <code>process_manager/views/actions.py</code> <pre><code>@login_required\n@permission_required(\"main.can_modify_processes\", raise_exception=True)\ndef process_action(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"Perform an action on the selected processes.\n\n    Both the action and the selected processes are retrieved from the request.\n\n    Args:\n        request: Django HttpRequest object.\n\n    Returns:\n        HttpResponse redirecting to the index page.\n    \"\"\"\n    try:\n        action = request.POST.get(\"action\", \"\")\n        action_enum = ProcessAction(action.lower())\n    except ValueError:\n        # action.lower() is not a valid enum value\n        return HttpResponseRedirect(reverse(\"process_manager:index\"))\n\n    if uuids_ := request.POST.getlist(\"select\"):\n        process_call(uuids_, action_enum)\n    return HttpResponseRedirect(reverse(\"process_manager:index\"))\n</code></pre>"},{"location":"reference/process_manager/views/pages/","title":"pages","text":""},{"location":"reference/process_manager/views/pages/#process_manager.views.pages","title":"<code>process_manager.views.pages</code>","text":"<p>View functions for pages.</p>"},{"location":"reference/process_manager/views/pages/#process_manager.views.pages-classes","title":"Classes","text":""},{"location":"reference/process_manager/views/pages/#process_manager.views.pages.BootProcessView","title":"<code>BootProcessView</code>","text":"<p>               Bases: <code>PermissionRequiredMixin</code>, <code>FormView[BootProcessForm]</code></p> <p>View for the BootProcess form.</p>"},{"location":"reference/process_manager/views/pages/#process_manager.views.pages.BootProcessView-functions","title":"Functions","text":""},{"location":"reference/process_manager/views/pages/#process_manager.views.pages.BootProcessView.form_valid","title":"<code>form_valid(form)</code>","text":"<p>Boot a Process when valid form data has been POSTed.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>BootProcessForm</code> <p>the form instance that has been validated.</p> required <p>Returns:</p> Type Description <code>HttpResponse</code> <p>A redirect to the index page.</p> Source code in <code>process_manager/views/pages.py</code> <pre><code>def form_valid(self, form: BootProcessForm) -&gt; HttpResponse:\n    \"\"\"Boot a Process when valid form data has been POSTed.\n\n    Args:\n        form: the form instance that has been validated.\n\n    Returns:\n        A redirect to the index page.\n    \"\"\"\n    boot_process(\"root\", form.cleaned_data)\n    return super().form_valid(form)\n</code></pre>"},{"location":"reference/process_manager/views/pages/#process_manager.views.pages-functions","title":"Functions","text":""},{"location":"reference/process_manager/views/pages/#process_manager.views.pages.index","title":"<code>index(request)</code>","text":"<p>View that renders the index/home page with process table.</p> Source code in <code>process_manager/views/pages.py</code> <pre><code>@login_required\ndef index(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"View that renders the index/home page with process table.\"\"\"\n    return render(request=request, template_name=\"process_manager/index.html\")\n</code></pre>"},{"location":"reference/process_manager/views/pages/#process_manager.views.pages.logs","title":"<code>logs(request, uuid)</code>","text":"<p>Display the logs of a process.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>the triggering request.</p> required <code>uuid</code> <code>UUID</code> <p>identifier for the process.</p> required <p>Returns:</p> Type Description <code>HttpResponse</code> <p>The rendered page.</p> Source code in <code>process_manager/views/pages.py</code> <pre><code>@login_required\n@permission_required(\"main.can_view_process_logs\", raise_exception=True)\ndef logs(request: HttpRequest, uuid: uuid.UUID) -&gt; HttpResponse:\n    \"\"\"Display the logs of a process.\n\n    Args:\n      request: the triggering request.\n      uuid: identifier for the process.\n\n    Returns:\n      The rendered page.\n    \"\"\"\n    logs_response = get_process_logs(str(uuid))\n\n    # Process the log text to exclude empty lines\n    log_lines = [val.data.line for val in logs_response if val.data.line.strip()]\n\n    context = {\"log_lines\": log_lines}\n    return render(request, \"process_manager/logs.html\", context)\n</code></pre>"},{"location":"reference/process_manager/views/partials/","title":"partials","text":""},{"location":"reference/process_manager/views/partials/#process_manager.views.partials","title":"<code>process_manager.views.partials</code>","text":"<p>View functions for partials.</p>"},{"location":"reference/process_manager/views/partials/#process_manager.views.partials-classes","title":"Classes","text":""},{"location":"reference/process_manager/views/partials/#process_manager.views.partials-functions","title":"Functions","text":""},{"location":"reference/process_manager/views/partials/#process_manager.views.partials.filter_table","title":"<code>filter_table(search, table)</code>","text":"<p>Filter table data based on search parameter.</p> <p>If the search parameter is empty, the table data is returned unfiltered. Otherwise, the table data is filtered based on the search parameter. The search parameter can be a string or a string with a column name and search string separated by a colon. If the search parameter is a column name, the search string is matched against the values in that column only. Otherwise, the search string is matched against all columns.</p> <p>Parameters:</p> Name Type Description Default <code>search</code> <code>str</code> <p>The search string to filter the table data.</p> required <code>table</code> <code>list[dict[str, str | int]]</code> <p>The table data to filter.</p> required <p>Returns:</p> Type Description <code>list[dict[str, str | int]]</code> <p>The filtered table data.</p> Source code in <code>process_manager/views/partials.py</code> <pre><code>def filter_table(\n    search: str, table: list[dict[str, str | int]]\n) -&gt; list[dict[str, str | int]]:\n    \"\"\"Filter table data based on search parameter.\n\n    If the search parameter is empty, the table data is returned unfiltered. Otherwise,\n    the table data is filtered based on the search parameter. The search parameter can\n    be a string or a string with a column name and search string separated by a colon.\n    If the search parameter is a column name, the search string is matched against the\n    values in that column only. Otherwise, the search string is matched against all\n    columns.\n\n    Args:\n        search: The search string to filter the table data.\n        table: The table data to filter.\n\n    Returns:\n        The filtered table data.\n    \"\"\"\n    if not search or not table:\n        return table\n\n    all_cols = list(table[0].keys())\n    column, _, search = search.partition(\":\")\n    if not search:\n        # No column-based filtering\n        search = column\n        columns = all_cols\n    elif column not in all_cols:\n        # If column is unknown, search all columns\n        columns = all_cols\n    else:\n        # Search only the specified column\n        columns = [column]\n    search = search.lower()\n    return [row for row in table if any(search in str(row[k]).lower() for k in columns)]\n</code></pre>"},{"location":"reference/process_manager/views/partials/#process_manager.views.partials.handle_errors","title":"<code>handle_errors(view_func)</code>","text":"<p>Decorator to handle errors.</p> <p>Parameters:</p> Name Type Description Default <code>view_func</code> <code>Callable[[HttpRequest], HttpResponse]</code> <p>The view function to be wrapped.</p> required <p>Returns:</p> Type Description <code>Callable[[HttpRequest], HttpResponse]</code> <p>The wrapped view function.</p> Source code in <code>process_manager/views/partials.py</code> <pre><code>def handle_errors(\n    view_func: Callable[[HttpRequest], HttpResponse],\n) -&gt; Callable[[HttpRequest], HttpResponse]:\n    \"\"\"Decorator to handle errors.\n\n    Args:\n        view_func: The view function to be wrapped.\n\n    Returns:\n        The wrapped view function.\n    \"\"\"\n    logger = logging.getLogger(\"django\")\n\n    def wrapped_view(request, *args, **kwargs) -&gt; HttpResponse:  # type: ignore\n        try:\n            return view_func(request, *args, **kwargs)\n        except Exception as e:\n            logger.exception(e)\n            return render(request, \"process_manager/partials/error_message.html\")\n\n    return wrapped_view\n</code></pre>"},{"location":"reference/process_manager/views/partials/#process_manager.views.partials.messages","title":"<code>messages(request)</code>","text":"<p>Search and render Kafka messages from the database.</p> Source code in <code>process_manager/views/partials.py</code> <pre><code>@login_required\n@handle_errors\ndef messages(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"Search and render Kafka messages from the database.\"\"\"\n    search = request.GET.get(\"search\", \"\")\n    records = DruncMessage.objects.filter(\n        topic__regex=settings.KAFKA_TOPIC_REGEX[\"PROCMAN\"], message__icontains=search\n    )\n\n    # Time is stored as UTC. localtime(t) converts this to our configured timezone.\n    messages = [\n        f\"{localtime(record.timestamp).strftime('%Y-%m-%d %H:%M:%S')}: {record.message}\"\n        for record in records\n    ]\n\n    return render(\n        request=request,\n        context=dict(messages=messages[::-1]),\n        template_name=\"process_manager/partials/message_items.html\",\n    )\n</code></pre>"},{"location":"reference/process_manager/views/partials/#process_manager.views.partials.process_table","title":"<code>process_table(request)</code>","text":"<p>Renders the process table.</p> <p>This view may be called using either GET or POST methods. GET renders the table with no check boxes selected. POST renders the table with checked boxes for any table row with a uuid provided in the select key of the request data.</p> Source code in <code>process_manager/views/partials.py</code> <pre><code>@login_required\n@handle_errors\ndef process_table(request: HttpRequest) -&gt; HttpResponse:\n    \"\"\"Renders the process table.\n\n    This view may be called using either GET or POST methods. GET renders the table with\n    no check boxes selected. POST renders the table with checked boxes for any table row\n    with a uuid provided in the select key of the request data.\n    \"\"\"\n    session_info = get_session_info()\n\n    status_enum_lookup = dict(item[::-1] for item in ProcessInstance.StatusCode.items())\n\n    table_data = []\n    process_instances = session_info.data.values\n    for process_instance in process_instances:\n        metadata = process_instance.process_description.metadata\n        uuid = process_instance.uuid.uuid\n        table_data.append(\n            {\n                \"uuid\": uuid,\n                \"name\": metadata.name,\n                \"user\": metadata.user,\n                \"session\": metadata.session,\n                \"status_code\": status_enum_lookup[process_instance.status_code],\n                \"exit_code\": process_instance.return_code,\n            }\n        )\n    # Filter table data based on search parameter\n    table_data = filter_table(request.GET.get(\"search\", \"\"), table_data)\n    table = ProcessTable(table_data)\n\n    # sort table data based on request parameters\n    table_configurator = django_tables2.RequestConfig(request)\n    table_configurator.configure(table)\n\n    return render(\n        request=request,\n        context=dict(table=table),\n        template_name=\"process_manager/partials/process_table.html\",\n    )\n</code></pre>"}]}